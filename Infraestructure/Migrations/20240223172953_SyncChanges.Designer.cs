// <auto-generated />
using System;
using Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(FakeRubikStoreContext))]
    [Migration("20240223172953_SyncChanges")]
    partial class SyncChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aplication.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Categorias", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Codigo");

                    b.Property<int>("IdState")
                        .HasColumnType("int")
                        .HasColumnName("IdEstado");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("IdUsuario");

                    b.HasKey("Id");

                    b.HasIndex("IdState");

                    b.HasIndex("IdUser");

                    b.ToTable("Envios", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Fecha");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float")
                        .HasColumnName("PrecioFinal");

                    b.Property<int>("IdDelivery")
                        .HasColumnType("int")
                        .HasColumnName("IdEnvio");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDelivery");

                    b.HasIndex("IdUser");

                    b.ToTable("Ordenes", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.OrdersProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("IdOrden");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("IdProducto");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Precio");

                    b.Property<int>("ProductsNumber")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.HasKey("Id");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdProduct");

                    b.ToTable("Productos_Ordenes", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Descripcion");

                    b.Property<int>("IdReview")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Imagen");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NombreProducto");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Miniatura");

                    b.HasKey("Id");

                    b.HasIndex("IdReview");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Aplication.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("IdCategoria");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("IdProducto");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdProduct");

                    b.ToTable("Categorias_Productos", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.ProductsProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdProductosNavigationId")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedoresNavigationId")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProductosNavigationId");

                    b.HasIndex("IdProveedoresNavigationId");

                    b.ToTable("ProductsProviders");
                });

            modelBuilder.Entity("Aplication.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Aplication.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Aplication.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdRol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Estado", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("IdDireccion");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("IdRol");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Contrasena");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Telefono");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Apellido");

                    b.Property<int>("UserDirectionNavId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress")
                        .IsUnique();

                    b.HasIndex("IdRole");

                    b.HasIndex("UserDirectionNavId");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.UserDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Direccion");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ciudad");

                    b.Property<string>("Country")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("pais");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<string>("State")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("estado");

                    b.HasKey("Id");

                    b.ToTable("Direccion", (string)null);
                });

            modelBuilder.Entity("Aplication.Entities.Delivery", b =>
                {
                    b.HasOne("Aplication.Entities.State", "IdStateNav")
                        .WithMany("Deliveries")
                        .HasForeignKey("IdState")
                        .IsRequired()
                        .HasConstraintName("FK_Envios_Estado");

                    b.HasOne("Aplication.Entities.User", "IdUserNav")
                        .WithMany("Deliveries")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Envios_Usuarios");

                    b.Navigation("IdStateNav");

                    b.Navigation("IdUserNav");
                });

            modelBuilder.Entity("Aplication.Entities.Order", b =>
                {
                    b.HasOne("Aplication.Entities.Delivery", "DeliveryNav")
                        .WithMany("Orders")
                        .HasForeignKey("IdDelivery")
                        .IsRequired()
                        .HasConstraintName("FK_Ordenes_Envios");

                    b.HasOne("Aplication.Entities.User", "UserNav")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Ordenes_Usuarios");

                    b.Navigation("DeliveryNav");

                    b.Navigation("UserNav");
                });

            modelBuilder.Entity("Aplication.Entities.OrdersProducts", b =>
                {
                    b.HasOne("Aplication.Entities.Order", "OrderNav")
                        .WithMany("OrderProducts")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_Ordenes_Ordenes");

                    b.HasOne("Aplication.Entities.Product", "ProductNav")
                        .WithMany("OrderProducts")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_Productos_Ordenes_Productos");

                    b.Navigation("OrderNav");

                    b.Navigation("ProductNav");
                });

            modelBuilder.Entity("Aplication.Entities.Product", b =>
                {
                    b.HasOne("Aplication.Entities.Review", "ReviewNav")
                        .WithMany("Products")
                        .HasForeignKey("IdReview")
                        .IsRequired()
                        .HasConstraintName("FK_Productos_Reviews");

                    b.Navigation("ReviewNav");
                });

            modelBuilder.Entity("Aplication.Entities.ProductCategory", b =>
                {
                    b.HasOne("Aplication.Entities.Category", "IdCategoriaNavigation")
                        .WithMany("ProductCategories")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Categorias_Productos_Categorias");

                    b.HasOne("Aplication.Entities.Product", "IdProductoNavigation")
                        .WithMany("ProductCategories")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_Categorias_Productos_Productos");

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("Aplication.Entities.ProductsProviders", b =>
                {
                    b.HasOne("Aplication.Entities.Product", "IdProductosNavigation")
                        .WithMany("ProvidersProducts")
                        .HasForeignKey("IdProductosNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplication.Entities.Provider", "IdProveedoresNavigation")
                        .WithMany("ProvidersProducts")
                        .HasForeignKey("IdProveedoresNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdProductosNavigation");

                    b.Navigation("IdProveedoresNavigation");
                });

            modelBuilder.Entity("Aplication.Entities.User", b =>
                {
                    b.HasOne("Aplication.Entities.UserDirection", null)
                        .WithOne("User")
                        .HasForeignKey("Aplication.Entities.User", "IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aplication.Entities.Role", "RoleNav")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Usuarios_Rol");

                    b.HasOne("Aplication.Entities.UserDirection", "UserDirectionNav")
                        .WithMany()
                        .HasForeignKey("UserDirectionNavId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleNav");

                    b.Navigation("UserDirectionNav");
                });

            modelBuilder.Entity("Aplication.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Aplication.Entities.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Aplication.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Aplication.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProvidersProducts");
                });

            modelBuilder.Entity("Aplication.Entities.Provider", b =>
                {
                    b.Navigation("ProvidersProducts");
                });

            modelBuilder.Entity("Aplication.Entities.Review", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Aplication.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Aplication.Entities.State", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Aplication.Entities.User", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Aplication.Entities.UserDirection", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
